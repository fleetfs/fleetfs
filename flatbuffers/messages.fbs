namespace generated;

union RequestType {ReadRequest, ReadRawRequest,
                   WriteRequest,
                   HardlinkIncrementRequest,
                   DecrementInodeRequest,
                   UpdateParentRequest, UpdateMetadataChangedTimeRequest}

table GenericRequest {
  request: RequestType;
}

struct CommitId {
  term: ulong;
  index: ulong;
}

// Reads only the blocks of data on this node
table ReadRawRequest {
  required_commit: CommitId (required);
  inode: ulong;
  offset: ulong;
  read_size: uint;
}

table ReadRequest {
  inode: ulong;
  offset: ulong;
  read_size: uint;
}

table WriteRequest {
  inode: ulong;
  offset: ulong;
  data: [ubyte] (required);
}

struct OptionalULong {
  value: ulong;
}

// Used internally for stage0 of hardlink transactions
table HardlinkIncrementRequest {
  inode: ulong;
}

// Internal request to update the parent link of a directory inode
table UpdateParentRequest {
  inode: ulong;
  new_parent: ulong;
  lock_id: OptionalULong;
}

// Internal request to update the metadata changed time an inode
table UpdateMetadataChangedTimeRequest {
  inode: ulong;
  lock_id: OptionalULong;
}

// TODO: raft messages have to be idempotent. This one is not.
// Internal request to decrement inode link count. Will delete the inode if its count reaches zero.
table DecrementInodeRequest {
  inode: ulong;
  // The number of times to decrement the link count
  decrement_count: uint;
  lock_id: OptionalULong;
}

root_type GenericRequest;

table RkyvResponse {
  rkyv_data: [ubyte] (required);
}

union ResponseType { RkyvResponse }

table GenericResponse {
  response: ResponseType;
}
