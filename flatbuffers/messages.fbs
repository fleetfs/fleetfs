namespace generated;

union RequestType {ReadRequest, ReadRawRequest, GetattrRequest, MkdirRequest, ReaddirRequest, RenameRequest,
                   UtimensRequest, ChmodRequest, HardlinkRequest, TruncateRequest, UnlinkRequest, LookupRequest,
                   WriteRequest, FilesystemChecksumRequest, FilesystemCheckRequest, RaftRequest,
                   LatestCommitRequest, GetLeaderRequest, RmdirRequest, ChownRequest,
                   FsyncRequest, GetXattrRequest, ListXattrsRequest, SetXattrRequest, RemoveXattrRequest}

table GenericRequest {
  request: RequestType;
}

// TODO: maybe support multiple messages in a single request
table RaftRequest {
  message: [ubyte] (required);
}

table LatestCommitRequest {
}

table GetLeaderRequest {
}

table FilesystemChecksumRequest {
}

table FilesystemCheckRequest {
}

table ListXattrsRequest {
  inode: ulong;
}

table GetXattrRequest {
  inode: ulong;
  key: string (required);
}

table SetXattrRequest {
  inode: ulong;
  key: string (required);
  value: [ubyte] (required);
}

table RemoveXattrRequest {
  inode: ulong;
  key: string (required);
}

// Reads only the blocks of data on this node
table ReadRawRequest {
  offset: ulong;
  read_size: uint;
  path: string (required);
}

table ReadRequest {
  offset: ulong;
  read_size: uint;
  path: string (required);
}

table GetattrRequest {
  inode: ulong;
}

table MkdirRequest {
  path: string (required);
  uid: uint;
  gid: uint;
  mode: ushort;
}

table WriteRequest {
  path: string (required);
  offset: ulong;
  data: [ubyte] (required);
}

table FsyncRequest {
  path: string (required);
}

table UnlinkRequest {
  path: string (required);
}

table RmdirRequest {
  path: string (required);
}

table TruncateRequest {
  path: string (required);
  new_length: ulong;
}

table ReaddirRequest {
  inode: ulong;
}

struct OptionalUInt {
  value: uint;
}

table ChownRequest {
  inode: ulong;
  uid: OptionalUInt;
  gid: OptionalUInt;
}

table ChmodRequest {
  inode: ulong;
  mode: uint;
}

table UtimensRequest {
  inode: ulong;
  uid: uint;
  atime: Timestamp;
  mtime: Timestamp;
}

table HardlinkRequest {
  path: string (required);
  new_path: string (required);
}

table RenameRequest {
  path: string (required);
  new_path: string (required);
}

table LookupRequest {
  parent: ulong;
  name: string (required);
}

root_type GenericRequest;

enum ErrorCode: byte {
  DefaultValueNotAnError = 0,
  DoesNotExist,
  FileTooLarge,
  AccessDenied,
  OperationNotPermitted,
  Corrupted,
  RaftFailure,
  Uncategorized
}

table ErrorResponse {
  error_code: ErrorCode;
}

table ReadResponse {
  data: [ubyte] (required);
}

table EmptyResponse {
}

struct Timestamp {
  seconds: long;
  nanos: int;
}

enum FileKind: ubyte {
  DefaultValueNotAType,
  File,
  Directory
}

table DirectoryEntry {
  name: string (required);
  kind: FileKind;
}

table DirectoryListingResponse {
  entries: [DirectoryEntry] (required);
}

table WrittenResponse {
  bytes_written: uint;
}

table FileMetadataResponse {
  size_bytes: ulong;
  size_blocks: ulong;
  last_access_time: Timestamp (required);
  last_modified_time: Timestamp (required);
  last_metadata_modified_time: Timestamp (required);
  kind: FileKind;
  mode: ushort;
  hard_links: uint;
  user_id: uint;
  group_id: uint;
  device_id: uint;
}

table LatestCommitResponse {
  term: ulong;
  index: ulong;
}

table NodeIdResponse {
  node_id: ulong;
}

table InodeResponse {
  inode: ulong;
}

table XattrsResponse {
  xattrs: [string] (required);
}

union ResponseType { EmptyResponse, ErrorResponse, ReadResponse, FileMetadataResponse, DirectoryListingResponse,
                     WrittenResponse, LatestCommitResponse, NodeIdResponse, XattrsResponse, InodeResponse }

table GenericResponse {
  response: ResponseType;
}
